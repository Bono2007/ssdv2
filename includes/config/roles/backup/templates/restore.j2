#!/bin/bash

  clear
  source /home/{{user.name}}/seedbox-compose/includes/functions.sh
  logo

  ERROR_FILE=/home/${USER}/errors.log
  EXIT=0
  ARCHIVE=""
  REMOTE=$(get_from_account_yml rclone.remote)

  # Définition des variables de couleurs
  CSI="\033["
  CEND="${CSI}0m"
  CRED="${CSI}1;31m"
  CGREEN="${CSI}1;32m"
  CYELLOW="${CSI}1;33m"
  CCYAN="${CSI}0;36m"
  BLUE='\e[0;36m'

backupList() {
  backups="/home/{{user.name}}/backup"
  i=0
  n=""
    
  # Vérifier si le dossier de sauvegarde est vide
  if [ -z "$(ls -A "$backups")" ]; then
    echo -e "\n${CRED}$(gettext "ERREUR: Aucune sauvegarde locale existante.")${CEND}\n" 1>&2
      exit 1
  else
    echo
    echo -e "${CGREEN}"$(gettext "Sauvegardes disponibles")"${CEND}"    
    # Parcourir les sauvegardes disponibles
    for backup in "$backups"/*; do
      let "i += 1"
      BACKUPPATH[$i]=$(stat -c "%n" "$backup")
      echo -e "${BLUE}     $i. ${BACKUPPATH[$i]##*/}${CEND}"
    done
  fi

  if [ "$i" -eq 0 ]; then
    echo -e "\n${CRED}$(gettext "ERREUR: Aucune sauvegarde locale existante.")${CEND}\n" 1>&2
    return 1
  fi

  echo >&2 -n -e "${CGREEN}"$(gettext "Numéro du dossier à ouvrir : ")"${CEND}"
  read -r n
  echo
  # Vérifier si le numéro du dossier est valide
  if [[ $n -lt 1 ]] || [[ $n -gt $i ]]; then
    echo -e "\n${CRED}$(gettext "ERREUR: Numéro de dossier invalide !")${CEND}"
    echo ""
    return 1
  fi

  # Récupérer le chemin du dossier sélectionné
  selected_folder="${BACKUPPATH[$n]}"
  echo -e "${CGREEN}"$(gettext "Liste des archives")"${CEND}"
  counter=1
  for file in "$selected_folder"/*; do
    echo -e "${BLUE}     $counter. $(basename "$file")${CEND}"
    ((counter++))
  done
  echo >&2 -n -e "${CGREEN}"$(gettext "Numéro de l'archive à restaurer : ")"${CEND}"
  read -r selected_archive_number

  # Vérifier si le numéro de l'archive est valide
  if [[ $selected_archive_number -lt 1 ]] || [[ $selected_archive_number -gt $counter ]]; then
    echo -e "\n${CRED}$(gettext "ERREUR: Numéro d'archive invalide !")${CEND}"
    echo ""
    return 1
  fi

  # Récupérer le nom de l'archive sélectionnée sans le chemin
  ARCHIVE=$(basename "$(ls -1 "$selected_folder" | sed -n "${selected_archive_number}p")")
  APPLI=$(basename "$(ls -1 "$selected_folder" | sed -n "${selected_archive_number}p")" | cut -d '-' -f1)
}

remoteRestoration() {
  echo ""
  echo -e "${CGREEN}"$(gettext "Sauvegardes disponibles")"${CEND}"    
  rclone lsf $REMOTE:/BACKUPS/ | sed 's:/.*::' | cat -n | sed 's/\([1-9].*\)/\1/' | awk '{print "\033[0;36m" $0 "\033[0m"}'

  # Demander à l'utilisateur de choisir un dossier
  echo >&2 -n -e "${CGREEN}"$(gettext "Numéro du dossier à ouvrir : ")"${CEND}"
  read -r folder_number
  echo
  # Vérifier si le numéro du dossier est valide
  if [[ $folder_number -lt 1 ]] || [[ $folder_number -gt $(rclone lsf crypt:/BACKUPS/ | wc -l) ]]; then
    echo -e "\n${CRED}$(gettext "ERREUR: Numéro de dossier invalide !")${CEND}"
    echo ""
    exit 1
  fi

  # Récupérer le nom du dossier sélectionné
  selected_folder=$(rclone lsf $REMOTE:/BACKUPS/ | sed 's:/.*::' | sed "${folder_number}q;d")

  # Afficher le contenu du dossier sélectionné
  echo -e "${CGREEN}"$(gettext "Liste des archives disponibles")"${CEND}"
  rclone lsf $REMOTE:/BACKUPS/"$selected_folder" | cat -n | awk '{print "\033[0;36m" $0 "\033[0m"}'
  # Demander à l'utilisateur de choisir une archive
  echo >&2 -n -e "${CGREEN}"$(gettext "Numéro de l'archive à restaurer : ")"${CEND}"
  read -r archive_number

  # Vérifier si le numéro de l'archive est valide
  if [[ $archive_number -lt 1 ]] || [[ $archive_number -gt $(rclone lsf crypt:/BACKUPS/"$selected_folder" | wc -l) ]]; then
    echo -e "\n${CRED}$(gettext "ERREUR: Numéro d'archive invalide !")${CEND}"
    echo ""
    exit 1
  fi

  # Récupérer le nom de l'archive sélectionnée
  ARCHIVE=$(rclone lsf $REMOTE:/BACKUPS/"$selected_folder" | sed "${archive_number}q;d")
  APPLI=$(rclone lsf $REMOTE:/BACKUPS/"$selected_folder" | sed "${archive_number}q;d" | cut -d '-' -f1)
}

localRestoration() {

  echo ""
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CCYAN}ATTENTION :" $(gettext "Restauration imminente de $APPLI")"${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"

  echo -e "\n"$(gettext "Appuyer sur") "${CCYAN}["$(gettext "ENTREE")"]${CEND}" $(gettext "pour démarrer la restauration ou CTRL+C pour quitter...")
  read -r
  echo -e "${BLUE}"$(gettext "> Récupération de l'archive locale")"${CEND}"
  sudo cp /home/{{user.name}}/backup/$APPLI/$ARCHIVE /
}

GdriveRestoration() {
  echo ""
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CCYAN}ATTENTION :" $(gettext "Restauration imminente de $APPLI")"${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"

  echo -e "\n"$(gettext "Appuyer sur") "${CCYAN}["$(gettext "ENTREE")"]${CEND}" $(gettext "pour démarrer la restauration ou CTRL+C pour quitter...")
  read -r
  echo -e "${BLUE}"$(gettext "> Récupération de l'archive distante")"${CEND}"
  sudo rclone --config "/home/{{user.name}}/.config/rclone/rclone.conf" copy $REMOTE:BACKUPS/$APPLI/$ARCHIVE / --progress
}

fin() {

  echo ""
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CCYAN}"$(gettext "Restauration terminée de $APPLI")"${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"

  echo -e "\n $(gettext "Appuyer sur") ${CCYAN}[$(gettext "ENTREE")]${CEND} $(gettext "pour continuer")"
  read -r
}

  echo -e "${CRED}---------------------------------------${CEND}"
  echo -e "${CCYAN}"$(gettext "Lancement de la restauration")"${CEND}"
  echo -e "${CRED}---------------------------------------${CEND}"
  echo ""
  echo -e ${CGREEN}"$(gettext "Choisir le type de restauration")"${CEND}
  echo -e  "${BLUE}     "1. Gdrive/Dropbox"${CEND}"
  echo -e  "${BLUE}     "2. Locale"${CEND}"
  echo -e "${CGREEN}---------------------------------------${CEND}"
  echo -e "${CGREEN}     "$(gettext "3) Retour au menu principal")"${CEND}"
  echo -e "${CGREEN}     "$(gettext "4) Retour au menu précédent")"${CEND}"
  echo -e "${CGREEN}---------------------------------------${CEND}"

  while [[ $EXIT -eq 0 ]]; do
    read -rp "Votre choix : " RTYPE
    case "$RTYPE" in
    "1")
        clear
        logo
        echo -e "${CGREEN}"$(gettext "Type de restauration sélectionnée :")"${CEND}" "${BLUE}Gdrive/Dropbox${CEND}"
        remoteRestoration
	GdriveRestoration
        EXIT=1
        ;;
    "2")
        clear
        logo
        echo -e "${CGREEN}"$(gettext "Type de restauration sélectionnée :")"${CEND}" "${BLUE}Locale${CEND}"
        backupList
        localRestoration
        EXIT=1
        ;;
    "3")
        affiche_menu_db
        ;;
    "4")
        EXIT=1
        ;;
    *)
        echo -e "${CRED}"$(gettext "Action inconnue")"${CEND}"
        ;;
    esac

  done
  cd /
  echo ""
  echo -e "${BLUE}"$(gettext "> Décompression de l'archive à la racine du système")"${CEND}"
  tar xvf "$ARCHIVE" --absolute-names -C / 2> $ERROR_FILE

  if [[ -s $ERROR_FILE ]]; then
    echo -e "\n${CRED}"$(gettext "ERREUR: Echec de la décompression de l'archive.")"${CEND}"
    echo -e ""
    exit 1
  fi
  sudo rm -rf "$ARCHIVE"
  fin