#!/bin/bash
myid=$(id -u)
if [ "$myid" -eq 0 ]; then
  # Définition des variables de couleurs
  CSI="\033["
  CEND="${CSI}0m"
  CRED="${CSI}1;31m"
  CGREEN="${CSI}1;32m"
  CYELLOW="${CSI}1;33m"
  CCYAN="${CSI}0;36m"

  # Variables
  REMOTE=$(get_from_account_yml rclone.remote)
  remote_backups=BACKUPS
  NB_MAX_BACKUP=3
  CDAY=$(date +%Y%m%d-%H%M)
  BACKUP_PARTITION=/home/{{ user.name }}/backup/seedbox
  #BACKUP_FOLDER=$BACKUP_PARTITION/backup-$CDAY
  ARCHIVE=$BACKUP_PARTITION/backup-$CDAY.tar.gz

  echo ""
  echo -e "${CRED}-----------------------------------------------${CEND}"
  echo -e "${CCYAN}"$(gettext "ATTENTION : Sauvegarde du serveur imminente")"${CEND}"
  echo -e "${CRED}-----------------------------------------------${CEND}"

  # Stop Plex
  plex=$(docker ps -aq --format={{ '{{' }}.Names{{ '}}' }} | grep -x 'plex' 1> /dev/null 2>&1 && echo true || echo false)
  if [[ ${plex} == "true" ]]; then
    echo -e "${CCYAN}> Arrêt de Plex${CEND}"
    docker stop plex
    sleep 5
  else
    echo -e "Plex non présent"
  fi

  echo ""
  echo -e "${CRED}---------------------------------------------------------${CEND}"
  echo -e "${CCYAN}"$(gettext "Lancement de la sauvegarde")"${CEND}"
  echo -e "${CRED}---------------------------------------------------------${CEND}"
  echo ""

  # Backup Plex database
  mkdir -p $BACKUP_PARTITION

  echo -e "${CCYAN}> Création de l'archive${CEND}"
  tar cvzf $ARCHIVE -P --exclude={{ settings.storage }}zurg {{ settings.storage }} /home/{{user.name}}/.config/ssd /home/{{user.name}}/.ansible /home/{{user.name}}/.vault_pass /home/{{user.name}}/scripts /home/{{user.name}}/.config/rclone/rclone.conf /etc/systemd {{ settings.source }}/ssddb --ignore-failed-read
  sleep 2s

  # Restart Plex
  if [[ ${plex} == "true" ]]; then
    echo -e "${CCYAN}>" $(gettext "Lancement de plex")"${CEND}"
    docker start plex
    sleep 5
  fi

  # if [ ${REMOTE} != notfound ]; then
  #  echo -e "${CCYAN}> Envoie Archive vers Google Drive${CEND}"
    # Envoie Archive vers Google Drive
  #  rclone --config "/home/{{user.name}}/.config/rclone/rclone.conf" copy "$ARCHIVE" "${REMOTE}:/$remote_backups/seedbox/" --progress
  #fi

  # Nombre de sauvegardes effectuées
  nbBackup=$(find $BACKUP_PARTITION -type f -name 'backup-*' | wc -l)

  if [[ "$nbBackup" -gt "$NB_MAX_BACKUP" ]]; then
    # Archive la plus ancienne
    oldestBackupPath=$(find $BACKUP_PARTITION -type f -name 'backup-*' -printf '%T+ %p\n' | sort | head -n 1 | awk '{print $2}')
    oldestBackupFile=$(find $BACKUP_PARTITION -type f -name 'backup-*' -printf '%T+ %p\n' | sort | head -n 1 | awk '{split($0,a,/\//); print a[6]}')

    # Suppression du répertoire du backup
    sudo rm "$oldestBackupPath"

    # if [ ${REMOTE} != notfound ]; then
      # Suppression Archive Google Drive
    #  echo -e "${CCYAN}> Suppression de l'archive la plus ancienne${CEND}"
    #  rclone --config "/home/{{user.name}}/.config/rclone/rclone.conf" purge "${REMOTE}:/$remote_backups/seedbox/$oldestBackupFile" --progress
    #fi
  fi
  chown {{user.name}}:{{user.name}} "/home/{{user.name}}/.config/rclone/rclone.conf"
  echo ""
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CCYAN}"$(gettext "SAUVEGARDE DU SERVEUR TERMINEE")"${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"
else
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CCYAN}"$(gettext "LA SAUVEGARDE DOIT ETRE LANCEE EN ROOT - ABANDON")"${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"
fi
