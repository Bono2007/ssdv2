#########################################################################
# Title:         Cloudbox: MOTD Role                                    #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---

- name: Check config Tautulli exists
  stat:
    path: "/opt/seedbox/docker/{{user.name}}/tautulli/config.ini"
  register: tautulli_config

- name: Check if plex_autoscan.service exists
  stat:
    path: "/etc/systemd/system/plex_autoscan.service"
  register: plex_autoscan_service

- name: 'ApiKey Tautulli'
  shell: |
    grep "api_key" /opt/seedbox/docker/{{user.name}}/tautulli/config.ini | cut -d '=' -f2 | sed 's/ //g' | head -1
  register: tautulli
  when: tautulli_config.stat.exists

- name: 'ApiKey Tautulli'
  debug:
    msg: '{{ tautulli.stdout }}'
  when: tautulli_config.stat.exists

- name: 'Pass plex_autoscan'
  shell: |
    grep "3468" /home/{{user.name}}/scripts/plex_autoscan/plex_autoscan.sh | cut -d '/' -f4 | tr -d ' '
  register: plex_autoscan
  when: plex_autoscan_service.stat.exists

- name: 'Pass plex_autoscan'
  debug:
    msg: '{{ plex_autoscan.stdout }}'
  when: plex_autoscan_service.stat.exists

- name: Get Public IP Address
  shell: dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'\"' '{ print $2}'
  register: public_ip_lookup

- name: Set 'public_ip' variable
  set_fact:
    public_ip: "{{ public_ip_lookup.stdout }}"

- name: Install required packages
  apt:
    state: present
    name:
      - lsb-release
      - figlet
      - jq
      - toilet
      - boxes

- name: Install required packages
  apt:
    state: present
    name:
      - update-motd
      - update-notifier-common
  when: (ansible_distribution|lower == 'ubuntu')

- name: Remove existing motd
  file: "path={{ item }} state=absent"
  with_items:
    - /etc/update-motd.d
    - /etc/motd
    - /etc/motd.dynamic

- name: Create motd directories
  file: "path={{ item }} state=directory owner=root group=root mode=0775 recurse=yes"
  with_items:
    - /opt/motd

- name: Check if MOTD news service
  stat:
    path: "/etc/default/motd-news"
  register: motd_news

- name: Disable MOTD news service
  ini_file:
    path: "/etc/default/motd-news"
    section: null
    option: "ENABLED"
    value: "0"
    no_extra_spaces: yes
    state: present
  when: (motd_news.stat.exists)

- name: Clone Cloudbox MOTD
  git:
    repo: https://github.com/cloudbox/motd.git
    dest: /opt/motd
    clone: yes
    version: HEAD
    force: yes
  become: yes
  become_user: "root"

- name: Install pip requirements
  pip:
    requirements: /opt/motd/requirements.txt
    executable: pip3
    virtualenv: '/opt/seedbox-compose/venv'


- name: Check if 'config.json' exists
  stat:
    path: "/opt/motd/config.json"
  register: motd_config

- name: Import default 'config.json'
  template:
    src: /opt/seedbox-compose/includes/config/roles/motd/templates/config.json.j2
    dest: /opt/motd/config.json
    owner: "root"
    group: "root"
    mode: 0775
    force: no
  when: (not motd_config.stat.exists)

- name: Touch '/opt/motd/activity.log' file
  file:
    path: /opt/motd/activity.log
    state: touch
    owner: "root"
    group: "root"
    mode: 0775

- name: Set 'cloudbox-motd.py' as executable
  file:
    path: /opt/motd/cloudbox-motd.py
    owner: "root"
    group: "root"
    mode: a+x

- name: Set 'all templates' as executable
  file:
    path: /opt/motd/motd/
    owner: "root"
    group: "root"
    recurse: yes
    mode: a+x

- name: Check if '/etc/ssh/sshd_config' exists
  stat:
    path: "/etc/ssh/sshd_config"
  register: sshd_config

- name: Install 'openssh-server'
  apt: "name=openssh-server state=present"
  when: (not sshd_config.stat.exists)

- name: Wait for '/etc/ssh/sshd_config' to be created
  wait_for:
    path: "/etc/ssh/sshd_config"
    state: present
  when: (not sshd_config.stat.exists)

- name: Set 'PrintLastLog no' to '/etc/ssh/sshd_config'
  lineinfile:
    path: "/etc/ssh/sshd_config"
    regexp: '^PrintLastLog\s?'
    line: 'PrintLastLog no'
    state: present
