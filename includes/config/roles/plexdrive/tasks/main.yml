---
- hosts: localhost
  gather_facts: yes

  tasks:
    - name: Creating paths
      become: yes
      file:
        path: "/mnt/plexdrive"
        state: directory
        mode: "0775"
        owner: "{{ lookup('env','USER') }}"
        group: "{{ lookup('env','MYGIDNAME') }}"



    - name: "Variables | Set 'teamdrive_enabled' variable"
      set_fact:
        teamdrive_enabled: "{{ true if not(
            (rclone.id_teamdrive is undefined)
            or
            (rclone.id_teamdrive is none)
            or
            (rclone.id_teamdrive| trim | length == 0)
          )
            else false }}"

    - name: "Containers | Gather list of running Docker containers"
      shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | xargs echo -n"
      register: ssd_managed_containers
      ignore_errors: yes

    - name: "Containers | Set 'containers_list' variable"
      set_fact:
        containers_list: "{{ ssd_managed_containers.stdout }}"

    - name: "Containers | Stop all running Docker containers"
      shell: "docker stop {{ containers_list }}"
      ignore_errors: yes
      when: (containers_list | trim | length > 0)

    - name: Check if mergerfs_plexdrive.service exists
      stat:
        path: "/etc/systemd/system/mergerfs_plexdrive.service"
      register: mergerfs_plexdrive_service

    - name: Service Tasks
      block:

      - name: Populate Service Facts
        service_facts:

      - name: Get plexdrive service state
        set_fact:
          mergerfs_plexdrive_service_running: "{{ (services['mergerfs_plexdrive.service'] is defined) and (services['mergerfs_plexdrive.service']['state'] == 'running') }}"

      - name: Stop mergerfs_plexdrive service
        become: yes
        systemd:
          name: mergerfs_plexdrive
          state: stopped
          enabled: no
        when: mergerfs_plexdrive_service_running

      - name: delete mergerfs_plexdrive.service
        become: yes
        shell: |
          rm /etc/systemd/system/mergerfs_plexdrive.service

      when: mergerfs_plexdrive_service.stat.exists

    - name: Check if rclone_plexdrive.service exists
      stat:
        path: "/etc/systemd/system/rclone_plexdrive.service"
      register: rclone_plexdrive_service

    - name: Service Tasks
      block:

      - name: Populate Service Facts
        service_facts:

      - name: Get rclone_plexdrive service state
        set_fact:
          rclone_plexdrive_service_running: "{{ (services['rclone_plexdrive.service'] is defined) and (services['rclone_plexdrive.service']['state'] == 'running') }}"

      - name: Stop rclone_plexdrive service
        become: yes
        systemd:
          name: rclone_plexdrive
          state: stopped
          enabled: no
        when: rclone_plexdrive_service_running

      - name: delete rclone_plexdrive.service
        become: yes
        shell: |
          rm /etc/systemd/system/rclone_plexdrive.service

      when: rclone_plexdrive_service.stat.exists

    - name: Check if mergerfs.service exists
      stat:
        path: "/etc/systemd/system/mergerfs.service"
      register: mergerfs_service

    - name: Service Tasks
      block:

      - name: Populate Service Facts
        service_facts:

      - name: Get mergerfs service state
        set_fact:
          mergerfs_service_running: "{{ (services['mergers.service'] is defined) and (services['mergers.service']['state'] == 'running') }}"

      - name: Stop mergerfs service
        become: yes
        systemd:
          name: mergerfs
          state: stopped
          enabled: no
        when: mergerfs_service_running

      - name: delete mergerfs.service
        become: yes
        shell: |
          rm /etc/systemd/system/mergerfs.service
        when: mergerfs_service_running

      when: mergerfs_service.stat.exists

    - name: Check if rclone.service exists
      stat:
        path: "/etc/systemd/system/rclone.service"
      register: rclone_service

    - name: Service Tasks
      block:

      - name: Populate Service Facts
        service_facts:

      - name: Get rclone service state
        set_fact:
          rclone_service_running: "{{ (services['rclone.service'] is defined) and (services['rclone.service']['state'] == 'running') }}"

      - name: Stop rclone service
        become: yes
        systemd:
          name: rclone
          state: stopped
          enabled: no
        when: rclone_service_running

      - name: delete rclone.service
        become: yes
        shell: |
          rm /etc/systemd/system/rclone.service
        when: rclone_service_running

      when: rclone_service.stat.exists

    - name: Check if plexdrive.service exists
      stat:
        path: "/etc/systemd/system/plexdrive.service"
      register: plexdrive_service

    - name: Service Tasks
      block:

      - name: Populate Service Facts
        service_facts:

      - name: Get plexdrive service state
        set_fact:
          plexdrive_service_running: "{{ (services['plexdrive.service'] is defined) and (services['plexdrive.service']['state'] == 'running') }}"

      - name: Stop plexdrive service
        become: yes
        systemd:
          name: plexdrive
          state: stopped
          enabled: no
        when: plexdrive_service_running

      - name: delete plexdrive.service
        become: yes
        shell: |
          rm /etc/systemd/system/plexdrive.service
        when: plexdrive_service_running

      when: plexdrive_service.stat.exists

    - name: install plexdrive latest
      become: yes
      shell: |
        version=$(curl https://github.com/plexdrive/plexdrive/releases/latest -s -L -I -o /dev/null -w '%{url_effective}'| grep -o '[0-9.].[0-9.].[0-9.]')
        wget -P /usr/bin https://github.com/plexdrive/plexdrive/releases/download/$version/plexdrive-linux-amd64
        mv /usr/bin/plexdrive-linux-amd64 /usr/bin/plexdrive
        chmod +x /usr/bin/plexdrive

    - name: Import systemd
      become: yes
      template:
        src: "{{ settings.source }}/includes/config/roles/plexdrive/templates/teamdrive.plexdrive.service.j2"
        dest: /etc/systemd/system/plexdrive.service
      when: teamdrive_enabled

    - name: Import systemd
      become: yes
      template:
        src: "{{ settings.source }}/includes/config/roles/plexdrive/templates/gdrive.plexdrive.service.j2"
        dest: /etc/systemd/system/plexdrive.service
      when: not teamdrive_enabled

    - name: Import systemd
      become: yes
      template:
        src: "{{ settings.source }}/includes/config/roles/unionfs/templates/mergerfs_only_plexdrive.service.j2"
        dest: /etc/systemd/system/mergerfs.service

    - name: Import systemd
      become: yes
      template:
        src: "{{ settings.source }}/includes/config/roles/rclone/templates/rclone_only_plexdrive.service.j2"
        dest: /etc/systemd/system/rclone.service

    - name: started Systemd plexdrive.service
      become: yes
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes      
        name: plexdrive.service

    - name: started Systemd mergerfs.service
      become: yes
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes      
        name: mergerfs.service

    - name: started Systemd rclone.service
      become: yes
      systemd:
        state: restarted
        daemon_reload: yes
        enabled: yes      
        name: rclone.service

    - name: "Containers | Start all previously running Docker containers"
      shell: "docker start {{ containers_list }}"
      ignore_errors: yes
      when: (containers_list | trim | length > 0)

