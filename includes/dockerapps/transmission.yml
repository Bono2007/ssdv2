#!/bin/bash
---
- hosts: localhost
  gather_facts: false
  vars_files:
    - "{{ lookup('env','CONFDIR') }}/variables/account.yml"
  tasks:
        
    # FACTS #######################################################################

    - name: create radarr state
      shell: |
        echo "1" > {{ lookup('env','CONFDIR') }}/status/transmission

    - name: Checking for existing app data
      stat:
        path: "{{ lookup('env','CONFDIR') }}/docker/{{lookup('env','USER')}}/authelia/configuration.yml"
      register: check

    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'transmission'
        image: 'haugene/transmission-openvpn:latest'

    - name: "Variables | Set 'cloudflare_enabled' variable"
      set_fact:
        cloudflare_enabled: "{{ true if not(
            (cloudflare.login is undefined)
            or
            (cloudflare.login is none)
            or
            (cloudflare.login | trim | length == 0)
            or
            (cloudflare.api is undefined)
            or
            (cloudflare.api is none)
            or
            (cloudflare.api | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'oauth_enabled' variable"
      set_fact:
        oauth_enabled: "{{ true if not(
            (oauth.client is undefined)
            or
            (oauth.client is none)
            or
            (oauth.client | trim | length == 0)
            or
            (oauth.secret is undefined)
            or
            (oauth.secret is none)
            or
            (oauth.secret | trim | length == 0)
            or
            (oauth.account is undefined)
            or
            (oauth.account is none)
            or
            (oauth.account | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'sub' variable"
      set_fact:
        sub_enabled: "{{ true if not(
            (sub[pgrole][pgrole] is undefined)
            or
            (sub[pgrole][pgrole] is none)
            or
            (sub[pgrole][pgrole] | trim | length == 0)
          )
            else false }}"

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ lookup('env','BASEDIR') }}/includes/config/roles/cloudflare/tasks/main.yml"
      vars:
        subdomain: "{{sub[pgrole][pgrole] if sub_enabled else pgrole}}"
      when: cloudflare_enabled

<<<<<<< HEAD
    - name: 'Creating transmission folder paths'
      file: "path={{item}} state=directory mode=0775 owner={{lookup('env','MYUID')}} group={{lookup('env','MYGID')}}"
      with_items:
        - "/home/{{lookup('env','USER')}}/local/transmission"
=======
    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'transmission'
        intport: '9091'
        image: 'ghcr.io/linuxserver/transmission'

    - name: Creating paths
      file: 'path={{item}} state=directory mode=0775 owner={{user.userid}} group={{user.groupid}}'
      with_items:
        - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}'
>>>>>>> 14ad3ee2afa16ec29c7b71763d517a1306764019

    # LABELS ######################################################################
    - name: 'Ajout label traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          ## HTTP Routers
          traefik.http.routers.transmission-rtr.entrypoints: 'https'
          traefik.http.routers.transmission-rtr.rule: 'Host(`{{{{sub[pgrole][pgrole] if sub_enabled else pgrole}}.{{user.domain}}`)'
          traefik.http.routers.transmission-rtr.tls: 'true'
          ## Middlewares
          traefik.http.routers.transmission-rtr.middlewares: "{{ 'chain-authelia@file' if check.stat.exists | default(false) else 'chain-oauth@file' if oauth_enabled | default(false) else 'chain-basic-auth@file' }}"
          ## HTTP Services
          #traefik.http.routers.transmission-rtr.tls.certresolver: 'dns-cloudflare' 
          traefik.http.routers.transmission-rtr.service: 'transmission-svc'
          traefik.http.services.transmission-svc.loadbalancer.server.port: '9091'

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
<<<<<<< HEAD
          - "{{ lookup('env','CONFDIR') }}/docker/{{lookup('env','USER')}}/transmission/data:/data"
          - "{{ lookup('env','CONFDIR') }}/docker/{{lookup('env','USER')}}/transmission/config:/config"
          - '/etc/localtime:/etc/localtime:ro'
          - "/home/{{lookup('env','USER')}}:/home/{{lookup('env','USER')}}"
=======
          - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/config:/config'
          - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/downloads:/downloads'
          - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/watch:/watch'
          - '/home/{{user.name}}:/home/{{user.name}}'
          - '/etc/localtime:/etc/localtime:ro'
>>>>>>> 14ad3ee2afa16ec29c7b71763d517a1306764019

    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
<<<<<<< HEAD
          PUID: "{{lookup('env','MYUID')}}"
          PGID: "{{lookup('env','MYGID')}}"
          CREATE_TUN_DEVICE: 'true'
          OPENVPN_PROVIDER: '{{provider}}'
          OPENVPN_USERNAME: '{{username}}'
          OPENVPN_PASSWORD: '{{password}}'
          OPENVPN_CONFIG: '{{config}}'
          LOCAL_NETWORK: '{{network}}'
          OPENVPN_OPTS: '--inactive 3600 --ping 10 --ping-exit 60'
          TRANSMISSION_DOWNLOAD_DIR: "/home/{{lookup('env','USER')}}/transmission"
          TZ: 'Europe/Paris'
=======
          PUID: '{{user.userid}}'
          PGID: '{{user.groupid}}'
>>>>>>> 14ad3ee2afa16ec29c7b71763d517a1306764019

    # MAIN DEPLOYMENT #############################################################

    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        pull: yes
        published_ports:
          - '51413:51413'
          - '51413:51413/udp'
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: unless-stopped
        networks:
          - name: traefik_proxy
        state: started
        labels: '{{pg_labels}}'

    - name: add resume file
      become: yes
      shell: |
        echo "{{pgrole}}-{{sub[pgrole][pgrole] if sub_enabled else pgrole}}.{{user.domain}}" >> {{ lookup('env','CONFDIR') }}/temp.txt




