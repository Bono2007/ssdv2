#
# A lancer avec un fichier vars
# Ex :
# ansible-playbook ${CONFDIR}/includes/dockerapps/generique.yml --extra-vars "@${CONFDIR}/includes/dockerapps/vars/calibre.yml"
#
# TODO: le lancer dans un fichier temp

---
- hosts: localhost
  gather_facts: true
  vars_files:
    - "{{ lookup('env','CONFDIR') }}/variables/account.yml" 
  vars:
    # - "traefik.enable": 'true'
    #       ## HTTP Routers
    # - "traefik.http.routers.{{ pgrole }}-rtr.entrypoints": 'https'
    # # traefik.http.routers.{{ pgrole }}-rtr.rule: 'Host(`{{sub[pgrole]  if sub_enabled else pgrole}}.{{user.domain}}`)'
    # # traefik.http.routers.{{ pgrole }}-rtr.tls: 'true'
    # #       ## Middlewares
    # # traefik.http.routers.{{ pgrole }}-rtr.middlewares: "{{ 'chain-authelia@file' if check.stat.exists | default(false) else 'chain-oauth@file' if oauth_enabled | default(false) else 'chain-basic-auth@file' }}"
    # #       ## HTTP Services
    # # traefik.http.routers.{{ pgrole }}-rtr.service: '{{ pgrole }}-svc'
    # # traefik.http.services.{{ pgrole }}-svc.loadbalancer.server.port: "{{ intport }}"


  tasks:
        
    # FACTS #######################################################################

    - name: "create {{ pgrole}} state"
      shell: |
        echo "1" > {{ lookup('env','CONFDIR') }}/status/{{ pgrole }}

    - name: Checking for existing app data
      stat:
        path: "{{ lookup('env','CONFDIR') }}/docker/{{ lookup('env','USER') }}/authelia/configuration.yml"
      register: check

    - name: "Variables | Set 'cloudflare_enabled' variable"
      set_fact:
        cloudflare_enabled: "{{ true if not(
            (cloudflare.login is undefined)
            or
            (cloudflare.login is none)
            or
            (cloudflare.login | trim | length == 0)
            or
            (cloudflare.api is undefined)
            or
            (cloudflare.api is none)
            or
            (cloudflare.api | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'oauth_enabled' variable"
      set_fact:
        oauth_enabled: "{{ true if not(
            (oauth.client is undefined)
            or
            (oauth.client is none)
            or
            (oauth.client | trim | length == 0)
            or
            (oauth.secret is undefined)
            or
            (oauth.secret is none)
            or
            (oauth.secret | trim | length == 0)
            or
            (oauth.account is undefined)
            or
            (oauth.account is none)
            or
            (oauth.account | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'sub' variable"
      set_fact:
        sub_enabled: "{{ true if not(
            (sub.pgrole is undefined)
            or
            (sub.pgrole is none)
            or
            (sub.pgrole | trim | length == 0)
          )
            else false }}"

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ lookup('env','BASEDIR') }}/includes/config/roles/cloudflare/tasks/main.yml"
      vars:
        subdomain: "{{sub.pgrole if sub_enabled else pgrole}}"
      when: cloudflare_enabled

    - name: Creating paths
      file: 'path={{item}} state=directory mode=0775 owner={{user.userid}} group={{user.groupid}}'
      with_items:
        - "{{ lookup('env','CONFDIR') }}/docker/{{ lookup('env','USER') }}/{{pgrole}}"

    # LABELS ######################################################################
    - name: 'Ajout label traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          ## HTTP Routers
          "traefik.http.routers.{{ pgrole }}-rtr.entrypoints": 'https'
          traefik.http.routers.{{ pgrole }}-rtr.rule: 'Host(`{{sub[pgrole]  if sub_enabled else pgrole}}.{{user.domain}}`)'
          traefik.http.routers.{{ pgrole }}-rtr.tls: 'true'
          ## Middlewares
          traefik.http.routers.{{ pgrole }}-rtr.middlewares: "{{ 'chain-authelia@file' if check.stat.exists | default(false) else 'chain-oauth@file' if oauth_enabled | default(false) else 'chain-basic-auth@file' }}"
          ## HTTP Services
          traefik.http.routers.{{ pgrole }}-rtr.service: '{{ pgrole }}-svc'
          traefik.http.services.{{ pgrole }}-svc.loadbalancer.server.port: "{{ intport }}"


    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: "{{ lookup('env','MYUID') }}"
          PGID: "{{ lookup('env','MYGID') }}"

    # MAIN DEPLOYMENT #############################################################

    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        #pull: yes
        volumes: 
          - "{{ lookup('env','CONFDIR') }}/docker/{{ lookup('env','USER') }}/{{pgrole}}/config:/config:rw"
          - "{{ lookup('env','HOME') }}:{{ lookup('env','HOME') }}"
        #  - "/etc/localtime:/etc/localtime:ro"
        #env: '{{pg_env}}'
        #restart_policy: unless-stopped
        networks:
          - name: traefik_proxy
        state: started
        #volumes:
        #  - "{{ lookup('env','CONFDIR') }}/docker/{{ lookup('env','USER') }}/{{pgrole}}/config:/config:rw"
        #  - "{{ lookup('env','HOME') }}:{{ lookup('env','HOME') }}"
        #  - '/etc/localtime:/etc/localtime:ro'
        labels: '{{pg_labels}}'

    - name: add resume file
      become: true
      shell: |
        echo "{{pgrole}}-{{sub[pgrole] if sub_enabled else pgrole}}.{{user.domain}}" >> /opt/temp.txt

    - name: "create {{ pgrole }} state"
      shell: |
        echo "2" > {{ lookup('env','CONFDIR') }}/status/{{ pgrole }}


