---
- hosts: localhost
  gather_facts: false

  tasks:

    - name: Supprimer le conteneur blackhole si present
      docker_container:
        name: blackhole
        state: absent

    - name: Supprimer le conteneur repair si present
      docker_container:
        name: repair
        state: absent

    - name: Exécuter docker system prune
      command: docker system prune -af

    - name: Supprimer le dossier blackhole s'il existe
      ansible.builtin.file:
        path: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/blackhole"
        state: absent
        force: yes

    - name: Vérifier si Radarr est lancé
      stat:
        path: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/radarr/config/config.xml"
      register: radarr_config_exists

    - name: Vérifier si Sonarr est lancé
      stat:
        path: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/sonarr/config/config.xml"
      register: sonarr_config_exists

    - name: Afficher un message si aucune instance de Radarr ou Sonarr n'est installée
      ansible.builtin.debug:
        msg: "Veuillez installer Radarr et Sonarr avant d'exécuter ce script."
      when: not (radarr_config_exists.stat.exists | bool) or not (sonarr_config_exists.stat.exists | bool)

    - name: Pause pour permettre à l'utilisateur de sortir avec Ctrl+C
      ansible.builtin.pause:
        prompt: "Appuyez sur Ctrl+C pour quitter..."
      when: not (radarr_config_exists.stat.exists | bool) or not (sonarr_config_exists.stat.exists | bool)

    - name: Fin du playbook si aucune instance de Radarr ou Sonarr n'est installée
      meta: end_play
      when: not (radarr_config_exists.stat.exists | bool) or not (sonarr_config_exists.stat.exists | bool)

    - name: Vérifier si Radarr4k est lancé
      stat:
        path: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/radarr4k/config/config.xml"
      register: radarr4k_config_exists

    - name: Vérifier si Sonarr4k est lancé
      stat:
        path: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/sonarr4k/config/config.xml"
      register: sonarr4k_config_exists

    - name: API de Radarr
      shell: "grep -oP '(?<=<ApiKey>).*?(?=</ApiKey>)' {{ settings.storage }}/docker/{{ lookup('env','USER') }}/radarr/config/config.xml"
      register: api_key_radarr
      when: radarr_config_exists.stat.exists | bool

    - name: Récupération root folder de Radarr
      shell: "curl -s -H 'X-Api-Key: {{ api_key_radarr.stdout }}' 'http://localhost:7878/api/v3/rootFolder' | jq -r '.[].path'"
      register: root_folder_radarr
      when: radarr_config_exists.stat.exists | bool

    - name: API de Radarr4k
      shell: "grep -oP '(?<=<ApiKey>).*?(?=</ApiKey>)' {{ settings.storage }}/docker/{{ lookup('env','USER') }}/radarr4k/config/config.xml"
      register: api_key_radarr_4k
      when: radarr4k_config_exists.stat.exists | bool

    - name: Récupération root folder de Radarr4k
      shell: "curl -s -H 'X-Api-Key: {{ api_key_radarr_4k.stdout }}' 'http://localhost:7878/api/v3/rootFolder' | jq -r '.[].path'"
      register: root_folder_radarr4k
      when: radarr4k_config_exists.stat.exists | bool

    - name: API de Sonarr
      shell: "grep -oP '(?<=<ApiKey>).*?(?=</ApiKey>)' {{ settings.storage }}/docker/{{ lookup('env','USER') }}/sonarr/config/config.xml"
      register: api_key_sonarr
      when: sonarr_config_exists.stat.exists | bool

    - name: Récupération root folder de Sonarr
      shell: "curl -s -H 'X-Api-Key: {{ api_key_sonarr.stdout }}' 'http://localhost:8989/api/v3/rootFolder' | jq -r '.[].path'"
      register: root_folder_sonarr
      when: sonarr_config_exists.stat.exists | bool

    - name: API de Sonarr4k
      shell: "grep -oP '(?<=<ApiKey>).*?(?=</ApiKey>)' {{ settings.storage }}/docker/{{ lookup('env','USER') }}/sonarr4k/config/config.xml"
      register: api_key_sonarr_4k
      when: sonarr4k_config_exists.stat.exists | bool

    - name: Récupération root folder de Sonarr4k
      shell: "curl -s -H 'X-Api-Key: {{ api_key_sonarr_4k.stdout }}' 'http://localhost:8989/api/v3/rootFolder' | jq -r '.[].path'"
      register: root_folder_sonarr4k
      when: sonarr4k_config_exists.stat.exists | bool

    - name: Creating paths
      become: yes
      file:
        path: "{{ item }}"
        state: directory
        mode: '0775'
        owner: "{{ lookup('env', 'MYUID') }}"
        group: "{{ lookup('env', 'MYGID') }}"
      with_items:
        - "{{ settings.storage }}/docker/{{ lookup('env', 'USER') }}/blackhole"

    - name: Clone west scripts
      git:
        repo: https://github.com/westsurname/scripts.git
        dest: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/blackhole"
        clone: yes
        update: yes
        version: "v1.2.2"
      become: yes
      become_user: "{{ lookup('env','USER') }}"

    - name: Créer les fichiers docker-compose et .env
      template:
        dest: "{{ settings.storage }}/docker/{{ lookup('env', 'USER') }}/blackhole/{{ item.dest }}"
        src: "{{ settings.source }}/includes/dockerapps/templates/blackhole/{{ item.src }}"
      with_items:
        - { dest: "docker-compose.yml", src: "docker-compose.yml.j2" }
        - { dest: ".env", src: ".env.j2" }
      become: yes
      become_user: "{{ lookup('env', 'USER') }}"

    - name: Importer les configurations de blackhole
      become: yes
      template:
        src: "{{ settings.source }}/includes/dockerapps/templates/blackhole/{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ lookup('env', 'MYUID') }}"
        group: "{{ lookup('env', 'MYGID') }}"
        mode: 0755
        force: yes
      with_items:
        - { src: "blackhole.j2", dest: "/usr/local/bin/blackhole" }
        - { src: "repair.j2", dest: "/usr/local/bin/repair" }
        - { src: "repair4k.j2", dest: "/usr/local/bin/repair4k" }
        - { src: "blackhole4k.j2", dest: "/usr/local/bin/blackhole4k" }

    - name: Exécuter le fichier blackhole
      command: "blackhole"
      become: yes
      become_user: "{{ lookup('env', 'USER') }}"

    - name: Afficher un message
      debug:
        msg: |
          Blackhole pour radarr & sonarr est actuellement lancé.
          Si vous souhaitez lancer blackhole pour sonarr4k et radarr4k
          Il vous suffit de taper dans le shell blackhole4k
          Une fonction repair pour réparer les symlinks brisés
          Taper "repair" ou "repair4k"

    - name: Installation terminée
      pause:
        prompt: "Appuyez sur Entrée pour revenir au menu principal"


