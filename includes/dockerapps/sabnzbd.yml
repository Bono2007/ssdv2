#!/bin/bash

---
- hosts: localhost
  gather_facts: false
  vars_files:
    - /opt/seedbox/variables/account.yml
  tasks:
        
    # FACTS #######################################################################

    - name: "Variables | Set 'cloudflare_enabled' variable"
      set_fact:
        cloudflare_enabled: "{{ true if not(
            (cloudflare.login is undefined)
            or
            (cloudflare.login is none)
            or
            (cloudflare.login | trim | length == 0)
            or
            (cloudflare.api is undefined)
            or
            (cloudflare.api is none)
            or
            (cloudflare.api | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'oauth_enabled' variable"
      set_fact:
        oauth_enabled: "{{ true if not(
            (oauth.client is undefined)
            or
            (oauth.client is none)
            or
            (oauth.client | trim | length == 0)
            or
            (oauth.secret is undefined)
            or
            (oauth.secret is none)
            or
            (oauth.secret | trim | length == 0)
            or
            (oauth.account is undefined)
            or
            (oauth.account is none)
            or
            (oauth.account | trim | length == 0)
          )
            else false }}"

    - name: "Set DNS Record on CloudFlare"
      include_tasks: '/opt/seedbox-compose/includes/config/roles/cloudflare/tasks/main.yml'
      vars:
        subdomain: sabnzbd
      when: cloudflare_enabled

    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'sabnzbd'
        intport: '8080'
        image: 'linuxserver/sabnzbd'

    - name: Creating paths
      file: 'path={{item}} state=directory mode=0775 owner={{user.userid}} group={{user.groupid}}'
      with_items:
        - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}'

    - name: 'Checking for existing app data'
      stat:
        path: /opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini
      register: inicheck

    # LABELS ######################################################################
    - name: 'Ajout label traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          traefik.port: '{{intport}}'
          traefik.frontend.rule: 'Host:{{pgrole}}.{{user.domain}}'
          traefik.frontend.auth.basic.users: '{{ user.htpwd if not (oauth_enabled) | default(false) else omit }}'
          traefik.frontend.headers.SSLHost: '{{pgrole}}.{{user.domain}}'
          traefik.docker.network: 'traefik_proxy'
          traefik.frontend.passHostHeader: 'true'
          traefik.frontend.headers.SSLForceHost: 'true'
          traefik.frontend.headers.SSLRedirect: 'true'
          traefik.frontend.headers.browserXSSFilter: 'true'
          traefik.frontend.headers.contentTypeNosniff: 'true'
          traefik.frontend.headers.forceSTSHeader: 'true'
          traefik.frontend.headers.STSSeconds: '315360000'
          traefik.frontend.headers.STSIncludeSubdomains: 'true'
          traefik.frontend.headers.STSPreload: 'true'
          traefik.frontend.headers.customResponseHeaders: 'X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
          traefik.frontend.headers.frameDeny: "false"
          traefik.frontend.auth.forward.address: 'http://oauth:4181'
          traefik.frontend.auth.forward.authResponseHeaders: 'X-Forwarded-User'
          traefik.frontend.auth.forward.trustForwardHeader: 'true'

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
          - '/etc/localtime:/etc/localtime:ro'
          - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}:/config'
          - '/home/{{user.name}}:/home/{{user.name}}'

    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: '{{user.userid}}'
          PGID: '{{user.groupid}}'

    # MAIN DEPLOYMENT #############################################################

    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        pull: yes
        published_ports:
          - '127.0.0.1:8080:8080'
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: unless-stopped
        networks:
          - name: traefik_proxy
        state: started
        labels: '{{pg_labels}}'

    # CONFIGURATION ###########################################################
    - name: 'Waiting for {{pgrole}} to initialize'
      wait_for:
        path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
        state: present
        delay: 5
        
    - name: 'Stopping {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        state: stopped

    # FIRST TIME CONFIGURATION ###########################################################
    - name: 'Configuring {{pgrole}} for first time use'
      block:
        - name: Set host_whitelist
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: host_whitelist
            value: 'sabnzbd.{{user.domain}},'
            state: present

        - name: Set direct_unpack
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: direct_unpack
            value: '1'
            state: present

        - name: Set ignore_samples
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: ignore_samples
            value: '1'
            state: present

        - name: set unwanted_extensions
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: unwanted_extensions
            value: exe, com, bat, sh, iso, m2ts, mt2s
            state: present

        - name: set cleanup_list
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: cleanup_list
            value: nfo, exe, com, bat, txt, doc, xls, xlxs, docx, doc, jpg, jeg, gif, png
            state: present

        - name: set action_on_unwanted_extensions
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: action_on_unwanted_extensions
            value: '2'
            state: present

        - name: set pause_on_pwrar - aborts encrypted rar rather than pausing
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: pause_on_pwrar
            value: '2'
            state: present

        - name: set new_nzb_on_failure - try a new nzb if it fails
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: new_nzb_on_failure
            value: '1'
            state: present

        - name: set flat_unpack
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: flat_unpack
            value: '1'
            state: present

        - name: set download_free
          ini_file:
            path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/sabnzbd.ini'
            section: misc
            option: download_free
            value: '25G'
            state: present
      when: not inicheck.stat.exists

    - name: Restart {{pgrole}}
      docker_container:
        name: '{{pgrole}}'
        state: started
