#!/bin/bash

---
- hosts: localhost
  gather_facts: false
  tasks:

    # VARIABLES ################################################################################
    - name: 'Including variables'
      include_tasks: '/opt/seedbox-compose/includes/dockerapps/variables.yml'

    - name: 'Register appli'
      shell: 'cat /opt/seedbox/variables/appli'
      register: appli
      ignore_errors: True

    - name: 'Register port'
      shell: 'cat /opt/seedbox/variables/port'
      register: port
      ignore_errors: True

    - name: 'Register image'
      shell: 'cat /opt/seedbox/variables/image'
      register: image
      ignore_errors: True

    # CLOUDFLARE ###############################################################################
    - name: Check config cloudflare exists
      stat:
        path: "/opt/seedbox/variables/cloudflare_api"
      register: cloudflare_config

    - name: Check config oauth_client exists
      stat:
        path: "/opt/seedbox/variables/oauth_client"
      register: oauth_client

    - name: "Set DNS Record on CloudFlare"
      include_tasks: '/opt/seedbox-compose/includes/config/roles/cloudflare/tasks/main.yml'
      vars:
        subdomain: '{{appli.stdout}}'
      when: cloudflare_config.stat.exists

    - name: Create '{{appli.stdout}}'-net network
      docker_network:
        name: '{{appli.stdout}}-net'
        state: present

    - name: Creating paths
      file: 'path={{item}} state=directory mode=0775 owner={{userid.stdout}} group={{groupid.stdout}}'
      with_items:
        - '/opt/seedbox/docker/{{user.stdout}}/{{appli.stdout}}'

###################################### Début de zone à modifier si besoin #######################

    - name: 'Set Known Facts'
      set_fact:
        pgrole: '{{appli.stdout}}'
        intport: '{{port.stdout}}'
        image: '{{image.stdout}}'

##################################### Fin de zone à modifier #####################################

    # LABELS ######################################################################
    - name: 'Ajout label traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          traefik.port: '{{intport}}'
          traefik.frontend.rule: 'Host:{{pgrole}}.{{domain.stdout}}'
          traefik.frontend.auth.basic: '{{ passwd.stdout if (not oauth_client.stat.exists) | default(false) else omit }}'
          traefik.frontend.headers.SSLHost: '{{pgrole}}.{{domain.stdout}}'
          traefik.docker.network: traefik_proxy
          traefik.frontend.passHostHeader: 'true'
          traefik.frontend.headers.SSLForceHost: 'true'
          traefik.frontend.headers.SSLRedirect: 'true'
          traefik.frontend.headers.browserXSSFilter: 'true'
          traefik.frontend.headers.contentTypeNosniff: 'true'
          traefik.frontend.headers.forceSTSHeader: 'true'
          traefik.frontend.headers.STSSeconds: '315360000'
          traefik.frontend.headers.STSIncludeSubdomains: 'true'
          traefik.frontend.headers.STSPreload: 'true'
          traefik.frontend.headers.customResponseHeaders: 'X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
          traefik.frontend.headers.frameDeny: "true"
          traefik.frontend.auth.forward.address: 'http://oauth:4181'
          traefik.frontend.auth.forward.authResponseHeaders: 'X-Forwarded-User'
          traefik.frontend.auth.forward.trustForwardHeader: 'true'

###################################### Début de zone à modifier si besoin #######################
 
    ## volumes docker
    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes: 
          - '/opt/seedbox/docker/{{user.stdout}}/{{appli.stdout}}/config:/config'
          - '/home/{{user.stdout}}:/home/{{user.stdout}}'
          - '/etc/localtime:/etc/localtime:ro'

    ## Ce block peu être supprimé si pas de variables d'environnements ou peu être (UID/GID)
    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: '{{userid.stdout}}'
          PGID: '{{groupid.stdout}}'

##################################### Fin de zone à modifier #####################################

    - name: 'Deploying db-{{appli.stdout}}'
      docker_container:
        name: 'db-{{appli.stdout}}'
        recreate: true
        image: 'linuxserver/mariadb'
        pull: yes
        volumes:
          - '/opt/seedbox/docker/{{user.stdout}}/{{pgrole}}/db-{{appli.stdout}}:/config'
          - '/etc/localtime:/etc/localtime:ro'
        env:
          PUID: '{{userid.stdout}}'
          PGID: '{{groupid.stdout}}'
          MYSQL_DATABASE: '{{appli.stdout}}db'
          MYSQL_USER: '{{appli.stdout}}'
          MYSQL_PASSWORD: '{{appli.stdout}}'
          MYSQL_ROOT_PASSWORD: '{{appli.stdout}}'
        restart_policy: unless-stopped
        networks:
          - name: '{{appli.stdout}}-net'
        state: started

    - name: Wait for 10 seconds before continuing
      wait_for:
        timeout: 10

    - name: 'Deploying {{appli.stdout}}'
      docker_container:
        name: '{{appli.stdout}}'
        image: '{{image}}'
        pull: yes
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: unless-stopped
        networks:
          - name: traefik_proxy
          - name: '{{appli.stdout}}-net'
        state: started
        labels: '{{pg_labels}}'
