---
- name: Launch Pretask
  include_tasks: "{{ settings.source }}/includes/dockerapps/pretasks/stremio/stremio_base.yml"

- name: Check for Redis containers
  block:
    - name: Check if stremio-redis container exists
      command: docker ps -a --filter "name=stremio-redis" --format "{% raw %}{{.Names}}{% endraw %}"
      register: stremio_redis_container
      changed_when: false

    - name: Fail if required containers do not exist
      fail:
        msg: "The {{ item.name }} container does not exist. Please ensure it is running before proceeding."
      when: item.result.stdout == ""
      loop:
        - { name: "stremio-redis", result: "{{ stremio_redis_container }}" }

- name: Set PostgreSQL variables for StreamFusion
  set_fact:
    app_name: "StreamFusion"
    postgres_container: "stremio-postgres"
    postgres_user: "stremio"
    postgres_password: "stremio"
    required_databases:
      - streamfusion

- name: Setup PostgreSQL for Streamfusion
  include_tasks: "{{ settings.source }}/includes/dockerapps/pretasks/stremio/postgres_setup.yml"

- name: Deploy Warp Proxy container
  block:
    - name: Create a volume for warp
      docker_volume:
        name: warp-data

    - name: Deploy warp container
      community.docker.docker_container:
        name: warp
        image: caomingjun/warp:latest
        exposed_ports:
          - 1080
        env:
          WARP_SLEEP: "2"
        capabilities:
          - NET_ADMIN
        sysctls:
          net.ipv6.conf.all.disable_ipv6: "0"
          net.ipv4.conf.all.src_valid_mark: "1"
        volumes:
          - warp-data:/var/lib/cloudflare-warp
        restart_policy: always
        networks:
          - name: traefik_proxy

- name: Collect and validate user inputs
  block:
    - name: Prompt for SECRET_API_KEY
      pause:
        prompt: "Enter SECRET_API_KEY (required)"
        echo: no
      register: secret_api_key_input
      until: secret_api_key_input.user_input != ''
      retries: 3
      delay: 1

    - name: Set SECRET_API_KEY
      set_fact:
        SECRET_API_KEY: "{{ secret_api_key_input.user_input }}"

    - name: Fail if SECRET_API_KEY is not provided
      fail:
        msg: "SECRET_API_KEY is required. Please provide a valid value."
      when: SECRET_API_KEY | length == 0

    - name: Prompt for RD_TOKEN
      pause:
        prompt: "Enter Real-Debrid token (RD_TOKEN) (leave empty for null)"
        echo: no
      register: rd_token_input

    - name: Set RD_TOKEN
      set_fact:
        RD_TOKEN: "{{ rd_token_input.user_input | default('', true) }}"

    - name: Prompt for AD_TOKEN
      pause:
        prompt: "Enter AllDebrid token (AD_TOKEN) (leave empty for null)"
        echo: no
      register: ad_token_input

    - name: Set AD_TOKEN
      set_fact:
        AD_TOKEN: "{{ ad_token_input.user_input | default('', true) }}"

    - name: Prompt for YGG_PASSKEY
      pause:
        prompt: "Enter your YggTorrent passkey (YGG_PASSKEY) (must be 32 characters, leave empty for null)"
        echo: no
      register: ygg_passkey_input

    - name: Validate and set YGG_PASSKEY
      set_fact:
        YGG_PASSKEY: "{{ ygg_passkey_input.user_input if ygg_passkey_input.user_input | length == 32 else '' }}"

    - name: Warn if YGG_PASSKEY is invalid
      debug:
        msg: "Warning: YGG_PASSKEY must be 32 characters long. It has been set to null."
      when: ygg_passkey_input.user_input != '' and ygg_passkey_input.user_input | length != 32

    - name: Prompt for SHAREWOOD_PASSKEY
      pause:
        prompt: "Enter your Sharewood passkey (SHAREWOOD_PASSKEY) (must be 32 characters, leave empty for null)"
        echo: no
      register: sharewood_passkey_input

    - name: Validate and set SHAREWOOD_PASSKEY
      set_fact:
        SHAREWOOD_PASSKEY: "{{ sharewood_passkey_input.user_input if sharewood_passkey_input.user_input | length == 32 else '' }}"

    - name: Warn if SHAREWOOD_PASSKEY is invalid
      debug:
        msg: "Warning: SHAREWOOD_PASSKEY must be 32 characters long. It has been set to null."
      when: sharewood_passkey_input.user_input != '' and sharewood_passkey_input.user_input | length != 32